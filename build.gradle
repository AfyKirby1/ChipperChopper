plugins {
    id 'fabric-loom' version '1.7.4'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:1.21.4"
    mappings "net.fabricmc:yarn:1.21.4+build.1"
    modImplementation "net.fabricmc:fabric-loader:0.16.9"
    modImplementation "net.fabricmc.fabric-api:fabric-api:0.119.3+1.21.4"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "mod_id": project.mod_id
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
    
    // PERFORMANCE OPTIMIZATION: Parallel compilation and incremental builds
    it.options.fork = true
    it.options.incremental = true
    it.options.forkOptions.jvmArgs = ['-Xmx1g']
    
    // Enable optimizations for release builds
    if (gradle.startParameter.taskNames.any { it.contains('build') }) {
        it.options.compilerArgs += ['-O', '-g:none'] // Optimize and remove debug info
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    
    // PERFORMANCE OPTIMIZATION: Enable JAR compression and exclude unnecessary files
    archiveClassifier = ''
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    
    exclude '**/package-info.class'
    exclude '**/*.DSStore'
    exclude '**/Thumbs.db'
    
    // Enable JAR compression for smaller file size
    zip64 = true
    
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date(),
            'Built-JDK': System.getProperty('java.version')
        )
    }
}

// PERFORMANCE OPTIMIZATION: Add a task to clean up development caches
task cleanCaches {
    group = 'build'
    description = 'Clean up development caches for better performance'
    doLast {
        println 'Cleaning development caches...'
        delete fileTree(dir: '.gradle/caches', include: '**/*')
        delete fileTree(dir: 'build/tmp', include: '**/*') 
        println 'Cache cleanup complete'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    }
} 